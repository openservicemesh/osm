/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openservicemesh/osm/pkg/apis/policy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IngressBackendLister helps list IngressBackends.
// All objects returned here must be treated as read-only.
type IngressBackendLister interface {
	// List lists all IngressBackends in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IngressBackend, err error)
	// IngressBackends returns an object that can list and get IngressBackends.
	IngressBackends(namespace string) IngressBackendNamespaceLister
	IngressBackendListerExpansion
}

// ingressBackendLister implements the IngressBackendLister interface.
type ingressBackendLister struct {
	indexer cache.Indexer
}

// NewIngressBackendLister returns a new IngressBackendLister.
func NewIngressBackendLister(indexer cache.Indexer) IngressBackendLister {
	return &ingressBackendLister{indexer: indexer}
}

// List lists all IngressBackends in the indexer.
func (s *ingressBackendLister) List(selector labels.Selector) (ret []*v1alpha1.IngressBackend, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IngressBackend))
	})
	return ret, err
}

// IngressBackends returns an object that can list and get IngressBackends.
func (s *ingressBackendLister) IngressBackends(namespace string) IngressBackendNamespaceLister {
	return ingressBackendNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IngressBackendNamespaceLister helps list and get IngressBackends.
// All objects returned here must be treated as read-only.
type IngressBackendNamespaceLister interface {
	// List lists all IngressBackends in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IngressBackend, err error)
	// Get retrieves the IngressBackend from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IngressBackend, error)
	IngressBackendNamespaceListerExpansion
}

// ingressBackendNamespaceLister implements the IngressBackendNamespaceLister
// interface.
type ingressBackendNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IngressBackends in the indexer for a given namespace.
func (s ingressBackendNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IngressBackend, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IngressBackend))
	})
	return ret, err
}

// Get retrieves the IngressBackend from the indexer for a given namespace and name.
func (s ingressBackendNamespaceLister) Get(name string) (*v1alpha1.IngressBackend, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ingressbackend"), name)
	}
	return obj.(*v1alpha1.IngressBackend), nil
}

/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openservicemesh/osm/pkg/apis/policy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UpstreamTrafficSettingLister helps list UpstreamTrafficSettings.
// All objects returned here must be treated as read-only.
type UpstreamTrafficSettingLister interface {
	// List lists all UpstreamTrafficSettings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UpstreamTrafficSetting, err error)
	// UpstreamTrafficSettings returns an object that can list and get UpstreamTrafficSettings.
	UpstreamTrafficSettings(namespace string) UpstreamTrafficSettingNamespaceLister
	UpstreamTrafficSettingListerExpansion
}

// upstreamTrafficSettingLister implements the UpstreamTrafficSettingLister interface.
type upstreamTrafficSettingLister struct {
	indexer cache.Indexer
}

// NewUpstreamTrafficSettingLister returns a new UpstreamTrafficSettingLister.
func NewUpstreamTrafficSettingLister(indexer cache.Indexer) UpstreamTrafficSettingLister {
	return &upstreamTrafficSettingLister{indexer: indexer}
}

// List lists all UpstreamTrafficSettings in the indexer.
func (s *upstreamTrafficSettingLister) List(selector labels.Selector) (ret []*v1alpha1.UpstreamTrafficSetting, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UpstreamTrafficSetting))
	})
	return ret, err
}

// UpstreamTrafficSettings returns an object that can list and get UpstreamTrafficSettings.
func (s *upstreamTrafficSettingLister) UpstreamTrafficSettings(namespace string) UpstreamTrafficSettingNamespaceLister {
	return upstreamTrafficSettingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UpstreamTrafficSettingNamespaceLister helps list and get UpstreamTrafficSettings.
// All objects returned here must be treated as read-only.
type UpstreamTrafficSettingNamespaceLister interface {
	// List lists all UpstreamTrafficSettings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UpstreamTrafficSetting, err error)
	// Get retrieves the UpstreamTrafficSetting from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UpstreamTrafficSetting, error)
	UpstreamTrafficSettingNamespaceListerExpansion
}

// upstreamTrafficSettingNamespaceLister implements the UpstreamTrafficSettingNamespaceLister
// interface.
type upstreamTrafficSettingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UpstreamTrafficSettings in the indexer for a given namespace.
func (s upstreamTrafficSettingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UpstreamTrafficSetting, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UpstreamTrafficSetting))
	})
	return ret, err
}

// Get retrieves the UpstreamTrafficSetting from the indexer for a given namespace and name.
func (s upstreamTrafficSettingNamespaceLister) Get(name string) (*v1alpha1.UpstreamTrafficSetting, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("upstreamtrafficsetting"), name)
	}
	return obj.(*v1alpha1.UpstreamTrafficSetting), nil
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openservicemesh/osm/pkg/certificate/providers (interfaces: ProvidersInfraClient)

// Package providers is a generated GoMock package.
package providers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/openservicemesh/osm/pkg/apis/config/v1alpha2"
	cache "k8s.io/client-go/tools/cache"
)

// MockProvidersInfraClient is a mock of ProvidersInfraClient interface.
type MockProvidersInfraClient struct {
	ctrl     *gomock.Controller
	recorder *MockProvidersInfraClientMockRecorder
}

// MockProvidersInfraClientMockRecorder is the mock recorder for MockProvidersInfraClient.
type MockProvidersInfraClientMockRecorder struct {
	mock *MockProvidersInfraClient
}

// NewMockProvidersInfraClient creates a new mock instance.
func NewMockProvidersInfraClient(ctrl *gomock.Controller) *MockProvidersInfraClient {
	mock := &MockProvidersInfraClient{ctrl: ctrl}
	mock.recorder = &MockProvidersInfraClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvidersInfraClient) EXPECT() *MockProvidersInfraClientMockRecorder {
	return m.recorder
}

// AddMeshRootCertificateEventHandler mocks base method.
func (m *MockProvidersInfraClient) AddMeshRootCertificateEventHandler(arg0 cache.ResourceEventHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMeshRootCertificateEventHandler", arg0)
}

// AddMeshRootCertificateEventHandler indicates an expected call of AddMeshRootCertificateEventHandler.
func (mr *MockProvidersInfraClientMockRecorder) AddMeshRootCertificateEventHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMeshRootCertificateEventHandler", reflect.TypeOf((*MockProvidersInfraClient)(nil).AddMeshRootCertificateEventHandler), arg0)
}

// GetMeshConfig mocks base method.
func (m *MockProvidersInfraClient) GetMeshConfig() v1alpha2.MeshConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshConfig")
	ret0, _ := ret[0].(v1alpha2.MeshConfig)
	return ret0
}

// GetMeshConfig indicates an expected call of GetMeshConfig.
func (mr *MockProvidersInfraClientMockRecorder) GetMeshConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshConfig", reflect.TypeOf((*MockProvidersInfraClient)(nil).GetMeshConfig))
}

// ListMeshRootCertificates mocks base method.
func (m *MockProvidersInfraClient) ListMeshRootCertificates() ([]*v1alpha2.MeshRootCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeshRootCertificates")
	ret0, _ := ret[0].([]*v1alpha2.MeshRootCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeshRootCertificates indicates an expected call of ListMeshRootCertificates.
func (mr *MockProvidersInfraClientMockRecorder) ListMeshRootCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeshRootCertificates", reflect.TypeOf((*MockProvidersInfraClient)(nil).ListMeshRootCertificates))
}

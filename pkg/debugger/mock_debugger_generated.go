// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openservicemesh/osm/pkg/debugger (interfaces: XDSDebugger)

// Package debugger is a generated GoMock package.
package debugger

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	envoy "github.com/openservicemesh/osm/pkg/envoy"
)

// MockXDSDebugger is a mock of XDSDebugger interface.
type MockXDSDebugger struct {
	ctrl     *gomock.Controller
	recorder *MockXDSDebuggerMockRecorder
}

// MockXDSDebuggerMockRecorder is the mock recorder for MockXDSDebugger.
type MockXDSDebuggerMockRecorder struct {
	mock *MockXDSDebugger
}

// NewMockXDSDebugger creates a new mock instance.
func NewMockXDSDebugger(ctrl *gomock.Controller) *MockXDSDebugger {
	mock := &MockXDSDebugger{ctrl: ctrl}
	mock.recorder = &MockXDSDebuggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXDSDebugger) EXPECT() *MockXDSDebuggerMockRecorder {
	return m.recorder
}

// GetXDSLog mocks base method.
func (m *MockXDSDebugger) GetXDSLog() map[string]map[envoy.TypeURI][]time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXDSLog")
	ret0, _ := ret[0].(map[string]map[envoy.TypeURI][]time.Time)
	return ret0
}

// GetXDSLog indicates an expected call of GetXDSLog.
func (mr *MockXDSDebuggerMockRecorder) GetXDSLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXDSLog", reflect.TypeOf((*MockXDSDebugger)(nil).GetXDSLog))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openservicemesh/osm/pkg/kubernetes (interfaces: KubeController)

// Package kubernetes is a generated GoMock package.
package kubernetes

import (
	gomock "github.com/golang/mock/gomock"
	service "github.com/openservicemesh/osm/pkg/service"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
)

// MockKubeController is a mock of KubeController interface
type MockKubeController struct {
	ctrl     *gomock.Controller
	recorder *MockKubeControllerMockRecorder
}

// MockKubeControllerMockRecorder is the mock recorder for MockKubeController
type MockKubeControllerMockRecorder struct {
	mock *MockKubeController
}

// NewMockKubeController creates a new mock instance
func NewMockKubeController(ctrl *gomock.Controller) *MockKubeController {
	mock := &MockKubeController{ctrl: ctrl}
	mock.recorder = &MockKubeControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeController) EXPECT() *MockKubeControllerMockRecorder {
	return m.recorder
}

// GetAnnouncementsChannel mocks base method
func (m *MockKubeController) GetAnnouncementsChannel(arg0 InformerKey) <-chan interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnouncementsChannel", arg0)
	ret0, _ := ret[0].(<-chan interface{})
	return ret0
}

// GetAnnouncementsChannel indicates an expected call of GetAnnouncementsChannel
func (mr *MockKubeControllerMockRecorder) GetAnnouncementsChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnouncementsChannel", reflect.TypeOf((*MockKubeController)(nil).GetAnnouncementsChannel), arg0)
}

// GetService mocks base method
func (m *MockKubeController) GetService(arg0 service.MeshService) *v1.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0)
	ret0, _ := ret[0].(*v1.Service)
	return ret0
}

// GetService indicates an expected call of GetService
func (mr *MockKubeControllerMockRecorder) GetService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockKubeController)(nil).GetService), arg0)
}

// IsMonitoredNamespace mocks base method
func (m *MockKubeController) IsMonitoredNamespace(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMonitoredNamespace", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMonitoredNamespace indicates an expected call of IsMonitoredNamespace
func (mr *MockKubeControllerMockRecorder) IsMonitoredNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMonitoredNamespace", reflect.TypeOf((*MockKubeController)(nil).IsMonitoredNamespace), arg0)
}

// ListMonitoredNamespaces mocks base method
func (m *MockKubeController) ListMonitoredNamespaces() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonitoredNamespaces")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitoredNamespaces indicates an expected call of ListMonitoredNamespaces
func (mr *MockKubeControllerMockRecorder) ListMonitoredNamespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitoredNamespaces", reflect.TypeOf((*MockKubeController)(nil).ListMonitoredNamespaces))
}

// ListServices mocks base method
func (m *MockKubeController) ListServices() []*v1.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices")
	ret0, _ := ret[0].([]*v1.Service)
	return ret0
}

// ListServices indicates an expected call of ListServices
func (mr *MockKubeControllerMockRecorder) ListServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockKubeController)(nil).ListServices))
}

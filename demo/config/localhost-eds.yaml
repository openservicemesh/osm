node:
  id: node1
  cluster: cluster1
admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 15000 }

# Configure a Cluster Discovery Service w/ mTLS
dynamic_resources:
  cds_config:
    api_config_source:
      api_type: GRPC
      grpc_services:
        envoy_grpc:
          cluster_name: cds_server_mtls

  lds_config:
    api_config_source:
      api_type: GRPC
      grpc_services:
        envoy_grpc:
          cluster_name: lds_server_mtls

static_resources:
  listeners:

  - name: listener_httpbin-demo-with-tls
    address:
      socket_address: { address: 0.0.0.0, port_value: 15002 }
    listener_filters:
    - name: "envoy.listener.tls_inspector"
      config: {}
    filter_chains:
    - filter_chain_match:
        server_names: ["httpbin.example.com"]
      tls_context:
        require_client_certificate: false
        common_tls_context:
          tls_certificate_sds_secret_configs:
          - name: server_cert
            sds_config:
              api_config_source:
                api_type: GRPC
                grpc_services:
                  envoy_grpc:
                    cluster_name: sds_server_mtls
      filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: AUTO
          rds:
            route_config_name: demo_route_config
            config_source:
              api_config_source:
                api_type: GRPC
                grpc_services:
                  envoy_grpc:
                    # will maintain connection based on cluster below.
                    cluster_name: rds_server_mtls
          http_filters:
          - name: envoy.router

  - name: httpbin-demo
    address:
      socket_address: { address: 0.0.0.0, port_value: 15001 }
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          stat_prefix: egress_http
          route_config:
            name: httpbin_local_route
            virtual_hosts:
            - name: httpbin_local_service
              domains: ["*"]
              routes:
              - match: { prefix: "/" }
                route:
                  auto_host_rewrite: true
                  cluster: httpbin_service
          http_filters:
          - name: envoy.router


  clusters:
    - name: httpbin_service___EDS
      connect_timeout: 0.25s
      lb_policy: ROUND_ROBIN
      type: EDS
      eds_cluster_config:
        eds_config:
          api_config_source:
            api_type: GRPC
            grpc_services:
              envoy_grpc:
                cluster_name: eds_server_mtls

    - name: httpbin_service
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      # Comment out the following line to test on v6 networks
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      hosts: [{ socket_address: { address: httpbin, port_value: 80 }}]

    - name: eds_server_mtls
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      http2_protocol_options: {}
      tls_context:
        common_tls_context:
          tls_params:
            tls_minimum_protocol_version: TLSv1_2
            tls_maximum_protocol_version: TLSv1_3
            cipher_suites: "[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]"
          tls_certificates:
            - certificate_chain: { filename: "./certificates/cert.pem" }
              private_key: { filename: "./certificates/key.pem" }
      load_assignment:
        cluster_name: eds_server_mtls
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address: { address: 0.0.0.0, port_value: 15124 }

    - name: sds_server_mtls
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      http2_protocol_options: {}
      tls_context:
        common_tls_context:
          tls_params:
            tls_minimum_protocol_version: TLSv1_2
            tls_maximum_protocol_version: TLSv1_3
            cipher_suites: "[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]"
          tls_certificates:
            - certificate_chain: { filename: "./certificates/cert.pem" }
              private_key: { filename: "./certificates/key.pem" }
      load_assignment:
        cluster_name: sds_server_mtls
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address: { address: 0.0.0.0, port_value: 15123 }

    - name: cds_server_mtls
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      http2_protocol_options: {}
      tls_context:
        common_tls_context:
          tls_params:
            tls_minimum_protocol_version: TLSv1_2
            tls_maximum_protocol_version: TLSv1_3
            cipher_suites: "[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]"
          tls_certificates:
            - certificate_chain: { filename: "./certificates/cert.pem" }
              private_key: { filename: "./certificates/key.pem" }
      load_assignment:
        cluster_name: cds_server_mtls
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address: { address: 0.0.0.0, port_value: 15125 }

    - name: lds_server_mtls
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      http2_protocol_options: {}
      tls_context:
        common_tls_context:
          tls_params:
            tls_minimum_protocol_version: TLSv1_2
            tls_maximum_protocol_version: TLSv1_3
            cipher_suites: "[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]"
          tls_certificates:
            - certificate_chain: { filename: "./certificates/cert.pem" }
              private_key: { filename: "./certificates/key.pem" }
      load_assignment:
        cluster_name: lds_server_mtls
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address: { address: 0.0.0.0, port_value: 15127 }


    - name: rds_server_mtls
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      http2_protocol_options: {}
      tls_context:
        common_tls_context:
          tls_params:
            tls_minimum_protocol_version: TLSv1_2
            tls_maximum_protocol_version: TLSv1_3
            cipher_suites: "[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]"
          tls_certificates:
            - certificate_chain: { filename: "./certificates/cert.pem" }
              private_key: { filename: "./certificates/key.pem" }
      load_assignment:
        cluster_name: rds_server_mtls
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address: { address: 0.0.0.0, port_value: 15126 }

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/open-service-mesh/osm/experimental/pkg/apis/osmbackpressureconfig/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OSMBackpressureConfigLister helps list OSMBackpressureConfigs.
// All objects returned here must be treated as read-only.
type OSMBackpressureConfigLister interface {
	// List lists all OSMBackpressureConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.OSMBackpressureConfig, err error)
	// OSMBackpressureConfigs returns an object that can list and get OSMBackpressureConfigs.
	OSMBackpressureConfigs(namespace string) OSMBackpressureConfigNamespaceLister
	OSMBackpressureConfigListerExpansion
}

// oSMBackpressureConfigLister implements the OSMBackpressureConfigLister interface.
type oSMBackpressureConfigLister struct {
	indexer cache.Indexer
}

// NewOSMBackpressureConfigLister returns a new OSMBackpressureConfigLister.
func NewOSMBackpressureConfigLister(indexer cache.Indexer) OSMBackpressureConfigLister {
	return &oSMBackpressureConfigLister{indexer: indexer}
}

// List lists all OSMBackpressureConfigs in the indexer.
func (s *oSMBackpressureConfigLister) List(selector labels.Selector) (ret []*v1.OSMBackpressureConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.OSMBackpressureConfig))
	})
	return ret, err
}

// OSMBackpressureConfigs returns an object that can list and get OSMBackpressureConfigs.
func (s *oSMBackpressureConfigLister) OSMBackpressureConfigs(namespace string) OSMBackpressureConfigNamespaceLister {
	return oSMBackpressureConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OSMBackpressureConfigNamespaceLister helps list and get OSMBackpressureConfigs.
// All objects returned here must be treated as read-only.
type OSMBackpressureConfigNamespaceLister interface {
	// List lists all OSMBackpressureConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.OSMBackpressureConfig, err error)
	// Get retrieves the OSMBackpressureConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.OSMBackpressureConfig, error)
	OSMBackpressureConfigNamespaceListerExpansion
}

// oSMBackpressureConfigNamespaceLister implements the OSMBackpressureConfigNamespaceLister
// interface.
type oSMBackpressureConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OSMBackpressureConfigs in the indexer for a given namespace.
func (s oSMBackpressureConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.OSMBackpressureConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.OSMBackpressureConfig))
	})
	return ret, err
}

// Get retrieves the OSMBackpressureConfig from the indexer for a given namespace and name.
func (s oSMBackpressureConfigNamespaceLister) Get(name string) (*v1.OSMBackpressureConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("osmbackpressureconfig"), name)
	}
	return obj.(*v1.OSMBackpressureConfig), nil
}

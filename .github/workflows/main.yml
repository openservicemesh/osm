name: Go
on: [push, pull_request]
jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: ShellCheck
      run: shellcheck -x $(find . -name '*.sh')

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Lint
      run: |
        go get golang.org/x/lint/golint
        export GOPATH=$HOME/go
        export GOBIN=$(go env GOPATH)/bin
        export PATH=$PATH:$GOPATH
        export PATH=$PATH:$GOBIN
        golint -set_exit_status ./...

    - name: Vet
      run: |
        if go vet -v ./...; then
            echo -e "govet SUCCEEDED"
        else
            echo -e "govet FAILED"
            exit 1
        fi

    - name: Fmt
      run: "! go fmt ./... 2>&1 | read"

    - name: Build
      run: go build -v ./...

    - name: Test with coverage
      run: |
        export GOPATH=$HOME/go
        export GOBIN=$(go env GOPATH)/bin
        export PATH=$PATH:$GOPATH
        export PATH=$PATH:$GOBIN
        go get golang.org/x/lint/golint
        go get -u github.com/jstemmer/go-junit-report
        go get -u github.com/axw/gocov/gocov
        go get -u github.com/AlekSi/gocov-xml
        go get -u github.com/matm/gocov-html
        go test -timeout 80s -v -coverprofile=coverage.txt -covermode count ./... | tee testoutput.txt || { echo "go test returned non-zero"; cat testoutput.txt; exit 1; }
        cat testoutput.txt | go-junit-report > report.xml
        gocov convert coverage.txt > coverage.json
        gocov-xml < coverage.json > coverage.xml
        mkdir coverage
        gocov-html < coverage.json > coverage/index.html

    - name: Integration Test
      env:
        KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        AZURE_SUBSCRIPTION: ${{ secrets.AZURE_SUBSCRIPTION }}
        CTR_REGISTRY: ${{ secrets.CTR_REGISTRY }}
        CTR_REGISTRY_CREDS_NAME: ${{ secrets.CTR_REGISTRY_CREDS_NAME }}
        CTR_TAG: "${{ github.run_id }}-${{ github.run_number}}"
        K8S_NAMESPACE: "ci-${{ github.run_id }}-${{ github.run_number}}"
        BOOKBUYER_NAMESPACE: "ci-bookbuyer-${{ github.run_id }}-${{ github.run_number}}"
        BOOKSTORE_NAMESPACE: "ci-bookstore-${{ github.run_id }}-${{ github.run_number}}"
        BOOKTHIEF_NAMESPACE: "ci-bookthief-${{ github.run_id }}-${{ github.run_number}}"
        PROMETHEUS_SVC: "ci-prometheus-${{ github.run_id }}-${{ github.run_number}}"
        OSM_ID: "osm-ci-${{ github.run_id }}-${{ github.run_number}}"
        ACR_CREDS: ${{ secrets.ACR_CREDS }}
        KUBECONFIG: ".kube/config"
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        WAIT_FOR_OK_SECONDS: 120
        IS_GITHUB: true
        ACR: ${{ secrets.ACR }}
        WAIT_FOR_POD_TIME_SECONDS: ${{ secrets.WAIT_FOR_POD_TIME_SECONDS }}
      run: |
        touch .env  # it is ok keep this empty
        echo "Creating Kubernetes namespace: $K8S_NAMESPACE"
        mkdir -p ".kube"
        echo "$KUBE_CONFIG" | base64 -d > "$KUBECONFIG"
        echo "$DOCKER_PASS" | docker login "$ACR" -u "$DOCKER_USER" --password-stdin
        go run ./ci/cmd/cleanup-namespaces.go
        ./demo/run-demo.sh
        go run ./demo/cmd/tail/tail.go

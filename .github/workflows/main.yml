name: Go
on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Info Please
      env:
        ACR: ${{ secrets.ACR }}
        KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        CTR_REGISTRY: ${{ secrets.CTR_REGISTRY }}
        CTR_REGISTRY_CREDS_NAME: ${{ secrets.CTR_REGISTRY_CREDS_NAME }}
        CTR_TAG: "${{ github.run_id }}-${{ github.run_number}}"
        K8S_NAMESPACE: "ci-${{ github.run_id }}-${{ github.run_number}}-tresor"
        BOOKWAREHOUSE_NAMESPACE: "ci-bookwarehouse-${{ github.run_id }}-${{ github.run_number}}-tresor"
        BOOKBUYER_NAMESPACE: "ci-bookbuyer-${{ github.run_id }}-${{ github.run_number}}-tresor"
        BOOKSTORE_NAMESPACE: "ci-bookstore-${{ github.run_id }}-${{ github.run_number}}-tresor"
        BOOKTHIEF_NAMESPACE: "ci-bookthief-${{ github.run_id }}-${{ github.run_number}}-tresor"
        PROMETHEUS_SVC: "ci-prometheus-${{ github.run_id }}-${{ github.run_number}}-tresor"
        OSM_ID: "ci-${{ github.run_id }}-${{ github.run_number}}-tresor" # Same as namespace
        KUBECONFIG: ".kube/config"
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
      run: |
        mkdir -p ".kube"
        echo "$KUBE_CONFIG" | base64 -d > "$KUBECONFIG"
        echo -e "OSM_ID: ${OSM_ID}"
        echo -e "K8S_NAMESPACE: ${K8S_NAMESPACE}"
        echo -e "\n\n-------------------- Kubernetes Cluster Info --------------------"
        kubectl cluster-info
        echo -e "\n\n-------------------- Kubernetes Namespaces --------------------"
        kubectl get namespaces
        echo -e "\n\n-------------------- Kubernetes Pods --------------------"
        kubectl get pods -A
        echo -e "\n\n-------------------- Docker Images Available --------------------"
        echo "$DOCKER_PASS" | docker login "$ACR" -u "$DOCKER_USER" --password-stdin
        docker images $ACR

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: ShellCheck
      run: shellcheck -x $(find . -name '*.sh')

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Lint
      run: |
        go get golang.org/x/lint/golint
        export GOPATH=$HOME/go
        export GOBIN=$(go env GOPATH)/bin
        export PATH=$PATH:$GOPATH
        export PATH=$PATH:$GOBIN
        golint -set_exit_status ./...

    - name: Vet
      run: |
        if go vet -v ./...; then
            echo -e "govet SUCCEEDED"
        else
            echo -e "govet FAILED"
            exit 1
        fi

    - name: Fmt
      run: "! go fmt ./... 2>&1 | read"

    - name: Build
      run: go build -v ./...

    - name: Cleanup stale CI namespaces
      env:
        KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        KUBECONFIG: ".kube/config"
      run: |
        touch .env  # it is ok keep this empty
        mkdir -p ".kube"
        echo "$KUBE_CONFIG" | base64 -d > "$KUBECONFIG"
        go run ./ci/cmd/cleanup/cleanup-namespaces.go

    - name: Create Docker images
      env:
        KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        CTR_REGISTRY: ${{ secrets.CTR_REGISTRY }}
        CTR_REGISTRY_CREDS_NAME: ${{ secrets.CTR_REGISTRY_CREDS_NAME }}
        CTR_TAG: "${{ github.run_id }}-${{ github.run_number}}"
        KUBECONFIG: ".kube/config"
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        IS_GITHUB: true
        ACR: ${{ secrets.ACR }}
      run: |
        touch .env  # it is ok keep this empty
        echo "Creating Kubernetes namespace: $K8S_NAMESPACE"
        mkdir -p ".kube"
        echo "$KUBE_CONFIG" | base64 -d > "$KUBECONFIG"
        echo "$DOCKER_PASS" | docker login "$ACR" -u "$DOCKER_USER" --password-stdin
        ./demo/build-push-images.sh

    - name: Test with coverage
      run: |
        export GOPATH=$HOME/go
        export GOBIN=$(go env GOPATH)/bin
        export PATH=$PATH:$GOPATH
        export PATH=$PATH:$GOBIN
        go get golang.org/x/lint/golint
        go get -u github.com/jstemmer/go-junit-report
        go get -u github.com/axw/gocov/gocov
        go get -u github.com/AlekSi/gocov-xml
        go get -u github.com/matm/gocov-html
        go test -timeout 80s -v -coverprofile=coverage.txt -covermode count ./... | tee testoutput.txt; test ${PIPESTATUS[0]} -eq 0 || { echo "go test returned non-zero exit code"; exit 1; }
        cat testoutput.txt | go-junit-report > report.xml
        gocov convert coverage.txt > coverage.json
        gocov-xml < coverage.json > coverage.xml
        mkdir coverage
        gocov-html < coverage.json > coverage/index.html

    - name: Integration Test with Tresor
      env:
        KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        AZURE_SUBSCRIPTION: ${{ secrets.AZURE_SUBSCRIPTION }}
        CTR_REGISTRY: ${{ secrets.CTR_REGISTRY }}
        CTR_REGISTRY_CREDS_NAME: ${{ secrets.CTR_REGISTRY_CREDS_NAME }}
        CTR_TAG: "${{ github.run_id }}-${{ github.run_number}}"
        K8S_NAMESPACE: "ci-${{ github.run_id }}-${{ github.run_number}}-tresor"
        BOOKWAREHOUSE_NAMESPACE: "ci-bookwarehouse-${{ github.run_id }}-${{ github.run_number}}-tresor"
        BOOKBUYER_NAMESPACE: "ci-bookbuyer-${{ github.run_id }}-${{ github.run_number}}-tresor"
        BOOKSTORE_NAMESPACE: "ci-bookstore-${{ github.run_id }}-${{ github.run_number}}-tresor"
        BOOKTHIEF_NAMESPACE: "ci-bookthief-${{ github.run_id }}-${{ github.run_number}}-tresor"
        PROMETHEUS_SVC: "ci-prometheus-${{ github.run_id }}-${{ github.run_number}}-tresor"
        OSM_ID: "ci-${{ github.run_id }}-${{ github.run_number}}-tresor" # Same as namespace
        KUBECONFIG: ".kube/config"
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        WAIT_FOR_OK_SECONDS: 120
        IS_GITHUB: true
        ACR: ${{ secrets.ACR }}
        CI_MAX_WAIT_FOR_POD_TIME_SECONDS: 30
        CI_MIN_SUCCESS_THRESHOLD: 1
        OSM_HUMAN_DEBUG_LOG: ${{ secrets.OSM_HUMAN_DEBUG_LOG }}
        CERT_MANAGER: "tresor"
      run: |
        touch .env  # it is ok keep this empty
        echo "Ensure K8s namespace $K8S_NAMESPACE is clean from previous runs"
        ./demo/clean-kubernetes.sh
        echo "Creating Kubernetes namespace: $K8S_NAMESPACE"
        mkdir -p ".kube"
        echo "$KUBE_CONFIG" | base64 -d > "$KUBECONFIG"
        echo "$DOCKER_PASS" | docker login "$ACR" -u "$DOCKER_USER" --password-stdin
        ./demo/run-osm-demo.sh
        go run ./ci/cmd/maestro.go

    - name: Integration Test with Hashi Vault
      env:
        KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
        AZURE_SUBSCRIPTION: ${{ secrets.AZURE_SUBSCRIPTION }}
        CTR_REGISTRY: ${{ secrets.CTR_REGISTRY }}
        CTR_REGISTRY_CREDS_NAME: ${{ secrets.CTR_REGISTRY_CREDS_NAME }}
        CTR_TAG: "${{ github.run_id }}-${{ github.run_number}}"
        K8S_NAMESPACE: "ci-${{ github.run_id }}-${{ github.run_number}}-hashivault"
        BOOKWAREHOUSE_NAMESPACE: "ci-bookwarehouse-${{ github.run_id }}-${{ github.run_number}}-hashivault"
        BOOKBUYER_NAMESPACE: "ci-bookbuyer-${{ github.run_id }}-${{ github.run_number}}-hashivault"
        BOOKSTORE_NAMESPACE: "ci-bookstore-${{ github.run_id }}-${{ github.run_number}}-hashivault"
        BOOKTHIEF_NAMESPACE: "ci-bookthief-${{ github.run_id }}-${{ github.run_number}}-hashivault"
        PROMETHEUS_SVC: "ci-prometheus-${{ github.run_id }}-${{ github.run_number}}-hashivault"
        OSM_ID: "ci-${{ github.run_id }}-${{ github.run_number}}-hashivault" # Same as namespace
        KUBECONFIG: ".kube/config"
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        WAIT_FOR_OK_SECONDS: 120
        IS_GITHUB: true
        ACR: ${{ secrets.ACR }}
        CI_MAX_WAIT_FOR_POD_TIME_SECONDS: 30
        CI_MIN_SUCCESS_THRESHOLD: 1
        OSM_HUMAN_DEBUG_LOG: ${{ secrets.OSM_HUMAN_DEBUG_LOG }}
        CERT_MANAGER: "vault"  # enables Hashi Vault integration
        VAULT_HOST: "vault.ci-${{ github.run_id }}-${{ github.run_number}}-hashivault.svc.cluster.local"
        VAULT_PROTOCOL: "http"
        VAULT_PORT: "8200"
        VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        VAULT_ROLE: "open-service-mesh"
      run: |
        touch .env  # it is ok keep this empty
        echo "Ensure K8s namespace $K8S_NAMESPACE is clean from previous runs"
        ./demo/clean-kubernetes.sh
        echo "Creating Kubernetes namespace: $K8S_NAMESPACE"
        mkdir -p ".kube"
        echo "$KUBE_CONFIG" | base64 -d > "$KUBECONFIG"
        echo "$DOCKER_PASS" | docker login "$ACR" -u "$DOCKER_USER" --password-stdin
        ./demo/run-osm-demo.sh
        go run ./ci/cmd/maestro.go

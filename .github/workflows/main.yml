name: Go
on:
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "**.md"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "**.md"
env:
  CI_WAIT_FOR_OK_SECONDS: 60
  CI_MAX_ITERATIONS_THRESHOLD: 60
  CI_CLIENT_CONCURRENT_CONNECTIONS: 1
  CI_MAX_WAIT_FOR_POD_TIME_SECONDS: 60
  CI_MIN_SUCCESS_THRESHOLD: 1
  OSM_HUMAN_DEBUG_LOG: true

jobs:
  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: ShellCheck
        run: shellcheck -x $(find . -name '*.sh')

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.30
          args: --timeout 5m

  tidy:
    name: Tidy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: go mod tidy
        run: |
          if ! go mod tidy ; then
            echo "Please run 'go mod tidy' to clean up dependencies"
            exit 1
          fi

  build:
    name: Go build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Restore Module Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-gomod2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gomod2-
      - name: Restore Build Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/*.go') }}
      - name: Setup Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: Go Build
        run: go build -v ./...

  unittest:
    name: Go test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Restore Module Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-gomod2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gomod2-
      - name: Restore Build Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/*.go') }}
      - name: Setup Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: Test
        run: make go-test-coverage
      - name: Upload Coverage
        if: ${{ success() }}
        run: bash <(curl -s https://codecov.io/bash)

  e2etest:
    name: Go test e2e
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Restore Module Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-gomod2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gomod2-
      - name: Restore Build Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/*.go') }}
      - name: Setup Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: Run E2E tests
        env:
          CTR_TAG: ${{ github.sha }}
          CTR_REGISTRY: "localhost:5000"   # unused for kind, but currently required in framework
        run: |
          make docker-build-osm-controller docker-build-init build-osm
          go test ./tests/e2e -test.v -ginkgo.v -ginkgo.progress -kindCluster -test.timeout 0 -test.failfast

  integration-tresor:
    name: Integration Test with Tresor, SMI traffic policies, and egress disabled
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Restore Module Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-gomod2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gomod2-

      - name: Restore Build Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/*.go') }}

      - name: Setup Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
        id: go

      - name: Run Simulation w/ Tresor, SMI policies, and egress disabled
        env:
          CERT_MANAGER: "tresor"
          BOOKSTORE_SVC: "bookstore"
          BOOKTHIEF_EXPECTED_RESPONSE_CODE: "0"
          ENABLE_EGRESS: "false"
          DEPLOY_TRAFFIC_SPLIT: "true"
          CTR_TAG: ${{ github.sha }}
        run: |
          touch .env
          make kind-up
          ./demo/run-osm-demo.sh
          go run ./ci/cmd/maestro.go

  integration-vault:
    name: Integration test with Hashi Vault, permissive traffic policy mode, and egress enabled
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Restore Module Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-gomod2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gomod2-

      - name: Restore Build Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/*.go') }}

      - name: Setup Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
        id: go

      - name: Run Simulation w/ Hashi Vault, permissive traffic policy mode, and egress enabled
        env:
          CERT_MANAGER: "vault" # enables Hashi Vault integration
          VAULT_HOST: "vault.osm-system.svc.cluster.local"
          VAULT_PROTOCOL: "http"
          VAULT_PORT: "8200"
          VAULT_TOKEN: "something"
          VAULT_ROLE: "openservicemesh"
          BOOKSTORE_SVC: "bookstore-v1"
          BOOKTHIEF_EXPECTED_RESPONSE_CODE: "200"
          ENABLE_EGRESS: "true"
          DEPLOY_TRAFFIC_SPLIT: "true"
          CTR_TAG: ${{ github.sha }}
        run: |
          touch .env
          make kind-up
          ./demo/run-osm-demo.sh --enable-permissive-traffic-policy
          go run ./ci/cmd/maestro.go

  integration-nosplit:
    name: Integration Test with jetstack/cert-manager, SMI traffic policies (no Traffic Split), egress disabled, 1:N Service-ServiceAccount mapping
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Restore Module Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-gomod2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gomod2-

      - name: Restore Build Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/*.go') }}

      - name: Setup Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
        id: go

      - name: Run Simulation w/ jetstack/cert-manager, SMI policies (no Traffic Split), egress disabled, 1:N Service-ServiceAccount mapping
        env:
          CERT_MANAGER: "cert-manager" # enables jetstack/cert-manager integration
          BOOKSTORE_SVC: "bookstore-v1"
          BOOKTHIEF_EXPECTED_RESPONSE_CODE: "0"
          ENABLE_EGRESS: "false"
          DEPLOY_TRAFFIC_SPLIT: "false"
          DEPLOY_WITH_SAME_SA: "true"
          CTR_TAG: ${{ github.sha }}
        run: |
          touch .env
          make kind-up
          ./demo/run-osm-demo.sh
          go run ./ci/cmd/maestro.go

  images:
    name: Docker Images
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    env:
      DOCKER_USER: ${{ secrets.RELEASE_DOCKER_USER }}
      DOCKER_PASS: ${{ secrets.RELEASE_DOCKER_PASS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Restore Module Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-gomod2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gomod2-
      - name: Restore Build Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/*.go') }}
      - name: Setup Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: Docker Login
        run: docker login --username "$DOCKER_USER" --password-stdin <<< "$DOCKER_PASS"
      - name: Push images with git sha tag
        env:
          CTR_TAG: ${{ github.sha }}
        run: make docker-push

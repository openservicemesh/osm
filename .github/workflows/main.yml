name: Go
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
  AZURE_SUBSCRIPTION: ${{ secrets.AZURE_SUBSCRIPTION }}
  CTR_REGISTRY: ${{ secrets.CTR_REGISTRY }}
  CTR_REGISTRY_CREDS_NAME: ${{ secrets.CTR_REGISTRY_CREDS_NAME }}
  CTR_TAG: "${{ github.run_id }}-${{ github.run_number}}"
  KUBECONFIG: ".kube/config"
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
  CI_WAIT_FOR_OK_SECONDS: 60
  CI_MAX_ITERATIONS_THRESHOLD: 30
  IS_GITHUB: true
  ACR: ${{ secrets.ACR }}
  CI_MAX_WAIT_FOR_POD_TIME_SECONDS: 60
  CI_MIN_SUCCESS_THRESHOLD: 1
  OSM_HUMAN_DEBUG_LOG: ${{ secrets.OSM_HUMAN_DEBUG_LOG }}

jobs:
  docker-build:
    name: Create Docker images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Restore Module Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-gomod2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gomod2-
      - name: Restore Build Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/*.go') }}
      - name: Setup Go 1.14
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
      - name: Create Docker images
        run: |
          touch .env  # it is ok keep this empty
          echo "Creating Kubernetes namespace: $K8S_NAMESPACE"
          mkdir -p ".kube"
          echo "$KUBE_CONFIG" | base64 -d > "$KUBECONFIG"
          echo "$DOCKER_PASS" | docker login "$ACR" -u "$DOCKER_USER" --password-stdin
          ./demo/build-push-images.sh

  integration-tresor:
    name: Integration Test with Tresor and SMI traffic policies
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Restore Module Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-gomod2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gomod2-
      - name: Restore Build Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/*.go') }}
      - name: Setup Go 1.14
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
        id: go
      - env:
          K8S_NAMESPACE: "ci-${{ github.run_id }}-${{ github.run_number}}-tresor"
          BOOKWAREHOUSE_NAMESPACE: "ci-bookwarehouse-${{ github.run_id }}-${{ github.run_number}}-tresor"
          BOOKBUYER_NAMESPACE: "ci-bookbuyer-${{ github.run_id }}-${{ github.run_number}}-tresor"
          BOOKSTORE_NAMESPACE: "ci-bookstore-${{ github.run_id }}-${{ github.run_number}}-tresor"
          BOOKTHIEF_NAMESPACE: "ci-bookthief-${{ github.run_id }}-${{ github.run_number}}-tresor"
          MESH_NAME: "ci-${{ github.run_id }}-${{ github.run_number}}-tresor" # Same as namespace
          CERT_MANAGER: "tresor"
          BOOKTHIEF_EXPECTED_RESPONSE_CODE: "404"
          BOOKSTORE_SVC: "bookstore-mesh"
        run: |
          touch .env  # it is ok keep this empty
          mkdir -p ".kube"
          echo "$KUBE_CONFIG" | base64 -d > "$KUBECONFIG"
          echo "Ensure K8s namespace $K8S_NAMESPACE is clean from previous runs"
          ./demo/clean-kubernetes.sh
          echo "Creating Kubernetes namespace: $K8S_NAMESPACE"
          echo "$DOCKER_PASS" | docker login "$ACR" -u "$DOCKER_USER" --password-stdin
          ./demo/run-osm-demo.sh
          go run ./ci/cmd/maestro.go

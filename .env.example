#!/bin/bash

# mandatory: a unique ID for an OSM instance within the kubernetes cluster.
export OSM_ID=osm-local

# mandatory: Kubernetes namespace where OSM will be installed.
# This cannot be the default namespace because it has to be a namespace that can be deleted.
export K8S_NAMESPACE=osm-system

# mandatory: Kubernetes namespace where bookwarehouse app will be installed.
# This cannot be the default namespace because it has to be a namespace that can be deleted.
export BOOKWAREHOUSE_NAMESPACE=bookwarehouse-ns-1

# mandatory: Kubernetes namespace where bookbuyer app will be installed.
# This cannot be the default namespace because it has to be a namespace that can be deleted.
export BOOKBUYER_NAMESPACE=bookbuyer-ns

# mandatory: Kubernetes namespace where bookstore app will be installed.
# This cannot be the default namespace because it has to be a namespace that can be deleted.
export BOOKSTORE_NAMESPACE=bookstore-ns

# mandatory: Kubernetes namespace where bookthief app will be installed.
# This cannot be the default namespace because it has to be a namespace that can be deleted.
export BOOKTHIEF_NAMESPACE=bookthief-ns

# mandatory: URL of the container registry to use.
export CTR_REGISTRY=your.azurecr.io/osm

# mandatory: Password to the container registry to use. Leave blank if no authentication is required.
# For ACR, the following command may be used: az acr credential show -n <your_registry_name> --query "passwords[0].value" | tr -d '"'
export CTR_REGISTRY_PASSWORD=

# mandatory: Name to be used for the Kubernetes secrets resource to be created from the Docker container registry.
export CTR_REGISTRY_CREDS_NAME=acr-creds

# mandatory: A tag for the containers used to version the container images in the registry
export CTR_TAG=latest

# optional: Path to your Kubernetes config file present locally.
export KUBECONFIG=~/.kube/config

# optional: Azure subscription ID
export AZURE_SUBSCRIPTION=abc

# optional: Time in seconds to wait for a 200 OK in the demo, 0 implies wait forever.
export WAIT_SECONDS_FOR_200_OK=0

# optional: Enable human readable logs on the console
export OSM_HUMAN_DEBUG_LOG=true

# optional: Enable logging of observed Kubernetes events (must have trace logging level enabled as well)
export OSM_LOG_KUBERNETES_EVENTS=true

# optional: Token to be shared between components (and used by the temporary instance of Vault)
export VAULT_TOKEN=abcd

# optional: Name of the Vault role dedicated to OSM
export VAULT_ROLE=open-service-mesh

# optional: Retention time for the data scraped by Prometheus service. Default is 15d
export PROMETHEUS_RETENTION_TIME=5d

# optional: Name of the bookstore service bookbuyer and bookthief make requests to.
# Default: bookstore-mesh
export BOOKSTORE_SVC=bookstore-mesh

# optional: Expected response code when bookthief makes reqeusts to bookstore
# Default: 404
export BOOKTHIEF_EXPECTED_RESPONSE_CODE=404

### The section below configures certificates management
### OSM has 2 ways to manage certificates
### Set CERT_MANAGER to "tresor" to use the internal system (relies on k8s secrets)
### Set CERT_MANAGER to "vault" to use Hashicorp Vault

# mandatory: What certificate manager to use. One of: tresor, vault
export CERT_MANAGER=tresor

### When CERT_MANAGER is set to "vault" the following also have to be set:

### Enable Hashicorp Vault integration
# export CERT_MANAGER=vault

### The Hashicorp Vault host/service - where Vault is installed
# export VAULT_HOST="vault.${K8S_NAMESPACE}.svc.cluster.local"

### The protocol to use to connect to Vault
# export VAULT_PROTOCOL=http

### The token that should be used to connect to Vault
# export VAULT_TOKEN=xyz

# See ./demo/deploy-vault.sh script on an example of how to deploy Hashicorp Vault
# to your Kubernetes cluster.

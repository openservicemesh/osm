# Default values for osm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

OpenServiceMesh:
  # -- `osm-controller` replicas 
  replicaCount: 1
  image:
    # -- `osm-controller` image registry
    registry: openservicemesh
    # -- `osm-controller` pod PullPolicy
    pullPolicy: IfNotPresent
    # -- `osm-controller` image tag
    tag: v0.6.1
  # -- `osm-controller` image pull secret   
  imagePullSecrets: []
  # -- Envoy sidecar image  
  sidecarImage: envoyproxy/envoy-alpine:v1.17.0
  prometheus:
    # -- Prometheus port  
    port: 7070
    retention:
      # -- Prometheus retention time
      time: 15d
  # -- The Certificate manager type: `tresor`, `vault` or `cert-manager` 
  certificateManager: tresor
  vault:
    # --  Hashicorp Vault host/service - where Vault is installed 
    host:
    # -- protocol to use to connect to Vault
    protocol: http
    # -- token that should be used to connect to Vault
    token:
    # -- Vault role to be used by Open Service Mesh   
    role: openservicemesh
  certmanager:
    # --  cert-manager issuer namecert-manager issuer name 
    issuerName: osm-ca
    # -- cert-manager issuer kind 
    issuerKind: Issuer
    # -- cert-manager issuer group
    issuerGroup: cert-manager
  # -- Sets the service certificatevalidity duration 
  serviceCertValidityDuration: 24h
  # -- The Kubernetes secret to store `ca.crt`
  caBundleSecretName: osm-ca-bundle
  grafana:
    # -- Grafana port 
    port: 3000
    # -- Enable Remote Rendering in Grafana  
    enableRemoteRendering: false
  # -- Enable the debug HTTP server    
  enableDebugServer: false
  # -- Enable permissive traffic policy mode  
  enablePermissiveTrafficPolicy: false
  # -- Enable experimental backpressure feature 
  enableBackpressureExperimental: false
  # -- Enable egress in the mesh 
  enableEgress: false
  # -- Deploy Prometheus
  deployPrometheus: false
  # -- Enable Prometheus metrics scraping on sidecar proxies  
  enablePrometheusScraping: true
  # -- Deploy Grafana
  deployGrafana: false
  # -- Enable Fluentbit sidecar deployment 
  enableFluentbit: false
  fluentBit:
    # -- luentBit Sidecar container name
    name: fluentbit-logger
    # -- Registry for FluentBit sidecar container 
    registry: fluent
    # -- FluentBit sidecar image tag
    tag: 1.6.4
    # -- PullPolicy for FluentBit sidecar container  
    pullPolicy: IfNotPresent
    # -- Log level for FluentBit  
    logLevel: error
    # -- FluentBit Output Plugin, can be `stdout` or `azure` 
    outputPlugin: stdout
    # -- WorkspaceId for FluentBit output plugin to Azure LogAnalytics
    workspaceId: ""
    # -- PrimaryKey for FluentBit output plugin to Azure LogAnalytics  
    primaryKey: ""
    # -- Enable proxy support for FluentBit
    enableProxySupport: false
    # -- HTTP Proxy url for FluentBit  
    httpProxy: ""
    # -- HTTPS Proxy url for FluentBit  
    httpsProxy: ""
  # -- Name for the new control plane instance
  meshName: osm
  # -- Enables HTTPS ingress on the mesh   
  useHTTPSIngress: false
  # -- Envoy log level is used to specify the level of logs collected from envoy 
  envoyLogLevel: error
  # -- Controller log verbosity 
  controllerLogLevel: trace
  # -- Enforce only deploying one mesh in the cluster     
  enforceSingleMesh: false
  # -- Validating- and MutatingWebhookConfiguration name            
  webhookConfigNamePrefix: osm-webhook

  # -- Optional parameter. If not specified, the release namespace is used to deploy the osm components.
  osmNamespace: ""

  # -- Deploy Jaeger in the OSM namespace
  deployJaeger: false

  # The following section configures a destination where to send
  # tracing data. Current implementation supports only Zipkin format
  # backends (https://github.com/openservicemesh/osm/issues/1596)
  tracing:

    # -- Toggles Envoy's tracing functionality on/off for all sidecar proxies in the cluster      
    enable: true

    # -- Tracing destination cluster (must contain the namespace) 
    address: "jaeger.osm-system.svc.cluster.local"

    # -- Destination port for the listener   
    port: 9411

    # -- Destination's API or collector endpoint where the spans will be sent to  
    endpoint: "/api/v2/spans"

apiVersion: apps/v1
kind: Deployment
metadata:
  name: osm-controller
  namespace: {{ include "osm.namespace" . }}
  labels:
    {{- include "osm.labels" . | nindent 4 }}
    app: osm-controller
    meshName: {{ .Values.OpenServiceMesh.meshName }}
    {{ if .Values.OpenServiceMesh.enforceSingleMesh }}enforceSingleMesh: "true"{{ end }}
spec:
  {{- if not .Values.OpenServiceMesh.osmController.autoScale.enable }}
  replicas: {{ .Values.OpenServiceMesh.osmController.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: osm-controller
  template:
    metadata:
      labels:
        {{- include "osm.labels" . | nindent 8 }}
        app: osm-controller
  {{- if .Values.OpenServiceMesh.osmController.podLabels }}
  {{- toYaml .Values.OpenServiceMesh.osmController.podLabels | nindent 8 }}
  {{- end }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9091'
    spec:
      serviceAccountName: {{ .Release.Name }}
      {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
      {{- include "restricted.securityContext" . | nindent 6 }}
      {{- end }}
      nodeSelector:
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux
      initContainers:
        - name: init-osm-controller
          image: curlimages/curl
          args:
          - /bin/sh
          - -c
          - >
            set -x;
            while [ $(curl --connect-timeout 2 -sw '%{http_code}' "http://osm-bootstrap.{{ include "osm.namespace" . }}.svc.cluster.local:9095/healthz" -o /dev/null) -ne 200 ]; do
              sleep 10;
            done
      containers:
        - name: osm-controller
          image: "{{ include "osmController.image" . }}"
          imagePullPolicy: {{ .Values.OpenServiceMesh.image.pullPolicy }}
          ports:
            - name: "admin-port"
              containerPort: 15000
            - name: "ads-port"
              containerPort: 15128
            - name: "metrics"
              containerPort: 9091
          command: ['/osm-controller']
          args: [
            "--verbosity", "{{.Values.OpenServiceMesh.controllerLogLevel}}",
            "--osm-namespace", "{{ include "osm.namespace" . }}",
            "--osm-version", "{{ .Chart.AppVersion }}",
            "--osm-service-account", "{{ .Release.Name }}",
            "--mesh-name", "{{.Values.OpenServiceMesh.meshName}}",
            "--validator-webhook-config", "{{ include "osm.validatorWebhookConfigName" . }}",
            "--ca-bundle-secret-name", "{{.Values.OpenServiceMesh.caBundleSecretName}}",
            "--certificate-manager", "{{.Values.OpenServiceMesh.certificateProvider.kind}}",
            {{ if eq .Values.OpenServiceMesh.certificateProvider.kind "vault" }}
            "--vault-host", "{{.Values.OpenServiceMesh.vault.host}}",
            "--vault-protocol", "{{.Values.OpenServiceMesh.vault.protocol}}",
            "--vault-token", "{{.Values.OpenServiceMesh.vault.token}}",
            {{- end }}
            "--cert-manager-issuer-name", "{{.Values.OpenServiceMesh.certmanager.issuerName}}",
            "--cert-manager-issuer-kind", "{{.Values.OpenServiceMesh.certmanager.issuerKind}}",
            "--cert-manager-issuer-group", "{{.Values.OpenServiceMesh.certmanager.issuerGroup}}",
            "--enable-reconciler={{.Values.OpenServiceMesh.enableReconciler}}",
            "--validate-traffic-target={{.Values.smi.validateTrafficTarget}}",
          ]
          resources:
            limits:
              cpu: "{{.Values.OpenServiceMesh.osmController.resource.limits.cpu}}"
              memory: "{{.Values.OpenServiceMesh.osmController.resource.limits.memory}}"
            requests:
              cpu: "{{.Values.OpenServiceMesh.osmController.resource.requests.cpu}}"
              memory: "{{.Values.OpenServiceMesh.osmController.resource.requests.memory}}"
          readinessProbe:
            initialDelaySeconds: 1
            timeoutSeconds: 5
            httpGet:
              scheme: HTTP
              path: /health/ready
              port: 9091
          livenessProbe:
            initialDelaySeconds: 1
            timeoutSeconds: 5
            httpGet:
              scheme: HTTP
              path: /health/alive
              port: 9091
          env:
            # The CONTROLLER_POD_NAME env variable sets pod name dynamically, used by osm-controller to register events
            - name: CONTROLLER_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
      {{- if .Values.OpenServiceMesh.enableFluentbit }}
        - name: {{ .Values.OpenServiceMesh.fluentBit.name }}
          image: {{ .Values.OpenServiceMesh.fluentBit.registry }}/fluent-bit:{{ .Values.OpenServiceMesh.fluentBit.tag }}
          imagePullPolicy: {{ .Values.OpenServiceMesh.fluentBit.pullPolicy }}
          env:
          {{- if .Values.OpenServiceMesh.fluentBit.enableProxySupport }}
          - name: HTTP_PROXY
            valueFrom:
              secretKeyRef:
                name: proxy-config
                key: HTTP_PROXY
          - name: HTTPS_PROXY
            valueFrom:
              secretKeyRef:
                name: proxy-config
                key: HTTPS_PROXY
          {{- end }}
          - name: CONTROLLER_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
          {{- include "fluentbit.securityContext" . | nindent 10 }}
          {{- end }}
          volumeMounts:
          - name: config
            mountPath: /fluent-bit/etc
            readOnly: true
          - name: var-log-containers
            mountPath: /var/log/containers
            readOnly: true
          - name: var-log-pods
            mountPath: /var/log/pods
            readOnly: true
          - name: var-lib-containers
            mountPath: /var/lib/docker/containers
            readOnly: true
       {{- end }}
    {{- if .Values.OpenServiceMesh.enableFluentbit }}
      volumes:
      - name: config
        configMap:
          name: fluentbit-configmap
      - name: var-log-containers
        hostPath:
          path: /var/log/containers
      - name: var-log-pods
        hostPath:
          path: /var/log/pods
      - name: var-lib-containers
        hostPath:
          path: /var/lib/docker/containers
    {{- end }}
    {{- if .Values.OpenServiceMesh.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.OpenServiceMesh.imagePullSecrets | indent 8 }}
    {{- end }}
    {{- if .Values.OpenServiceMesh.controlPlaneTolerations }}
      tolerations:
{{ toYaml .Values.OpenServiceMesh.controlPlaneTolerations | indent 8 }}
    {{- end }}
